import sys

input = sys.stdin.readline


# 1699 제곱수의 합
# 숫자 n을 정수의 제곱수의 합으로 나타낼 수 있는 경우 중
# 가장 적은 제곱수를 사용하는 경우의 제곱수의 갯수를 구하는 문제
def sol1699():
    n = int(input())

    # dp[i] 는 정수 i 를 나타내기위해 필요한 제곱수 갯수의 최솟값
    dp = [0] * (n + 1)

    # dp[1], dp[2], dp[3] 은 각각 1, 2, 3개를 필요로함 (1, 1+1, 1+1+1)
    dp[1:4] = [1, 2, 3]

    # dp[n] 까지 구하기
    for i in range(4, n + 1):
        # i의 제곱근(버림)
        sq = int(i ** .5)

        # 만약 i가 제곱수라면 dp[i] = 1
        if sq ** 2 == i:
            dp[i] = 1

        # 그렇지 않다면 (i 보다 작은 제곱수) + 나머지 로 표현할 수 있기 때문에
        # dp[i] 는 2 <= j <= sq 인 j 에 대해서 dp[i - j ** 2] 중 최솟값에 1을 더한 값이 된다.
        # 제곱수 1을 네번 이상 사용하는 순간 2의 제곱수인 4를 사용하는 것이 보다 최솟값이 되기 때문에
        # 최소한의 제곱수만 사용하여 정수 n을 나타내려면 1을 세 번까지밖에 사용할 수 없다.
        # 1을 한 번, 두 번, 세 번 사용한 경우가 각각 dp[1], dp[2], dp[3] 에 미리 계산되어있기 때문에
        # j에 1은 포함시킬 필요가 없다.
        else:
            dp[i] = min([dp[i - j ** 2] for j in range(2, sq + 1)]) + 1

    # n을 나타내기 위한 제곱수 갯수의 최솟값 반환
    return dp[n]
