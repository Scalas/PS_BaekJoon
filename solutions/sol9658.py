import sys

input = sys.stdin.readline


# 9658 돌게임 4
# 상근 창영 순으로 번갈아가며 돌을 1개, 3개, 또는 4개씩 가져갈 수 있을 때
# 마지막으로 돌을 가져간사람이 진다고 하면 n개의 돌로 양쪽이 최선의 게임을 했을때 이기는 사람을 구하는 문제

# 동적 계획법을 사용한 풀이
def sol9658():
    n = int(input())
    dp = [0] * (n+1)
    dp[1:5] = [-1, 1, -1, 1]
    # 상근이가 첫 수로 1개, 3개, 4개를 골랐을 때 남는 돌은 각각 i-1, i-3, i-4
    # 돌이 i-1개, i-3개, i-4 개일 때 모두 상근이가 이겼다면 i-1, i-3, i-4개로 플레이하면 선공이 반드시 이긴다는 의미
    # 이 경우 상근이가 먼저 돌을 가져간 상태이기에 창영이가 선공이 되고 상근이가 어떤 선택을 하든 창영이가 이긴다는 의미가 된다.
    # 하나라도 창영이가 이기는 경우, 즉 후공이 이기는 경우가 있다면 상근이는 그것을 선택하여 승리할 수 있다.
    for i in range(5, n+1):
        dp[i] = -1 if dp[i-1] + dp[i-3] + dp[i-4] == 3 else 1
    return 'SK' if dp[n] > 0 else 'CY'


# 승패의 규칙을 사용한 풀이
# 상근이가 이긴것을 1, 창영이가 이긴것을 -1이라고 표현할 때
# 승패는 돌이 1개일때부터 시작하여 -1, 1, -1, 1, 1, 1, 1 을 반복한다.
# 즉, n % 7 이 1, 3 일 때를 제외하면 상근이가 이긴다는 사실을 알 수 있다.
def sol9658_2():
    dp = [1, -1, 1, -1, 1, 1, 1]
    return 'SK' if dp[int(input()) % 7] > 0 else 'CY'
