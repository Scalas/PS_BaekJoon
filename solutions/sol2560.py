import sys

input = sys.stdin.readline
mod = 1000


# 2560 짚신벌레
# 짚신벌레는 성체가 되는순간부터 매일 하나씩 새로운 짚신벌레를 만들어내고
# 생식기능을 잃어버리는 순간부터는 짚신벌레를 만들어내지 않으며
# 수명에 도달하는순간 죽어서 사라진다.
# 짚신벌레가 성체가 되는데 걸리는 일수 a와 생식기능을 잃어버리데 걸리는 일수 b,
# 수명이 다해 죽는데 걸리는 일수 d가 주어졌을 때
# n일째에 남아있는 짚신벌레의 수를 구하는 문제
def sol2560():
    a, b, d, n = map(int, input().split())

    # n이 짚신벌레가 성체가 되는데 걸리는 시간보다 작을 경우
    if n < a:
        return 1

    dp = [0] * (n+2)

    # 처음 넣은 짚신벌레가 성체가 되기전까진 1마리뿐
    for i in range(a):
        dp[i] = 1

    # 첫 짚벌레가 성체가 된 이후부터 첫 짚신벌레가 사망하기 전까지
    for i in range(a, min(n+1, d)):
        # 전날의 짚신벌레수 + a일 전부터 존재했던 짚신벌레(성체 이상인 짚신벌레) 수
        dp[i] = (dp[i-1] + dp[i-a]) % mod

        # 만약 b일 전부터 존재했던 짚신벌레(생식기능을 잃어버릴만큼 짚신벌레)가 있다면
        # 그 수만큼은 증가하지 않은 것이므로 빼줌
        if i >= b:
            dp[i] = (dp[i] - dp[i-b]) % mod

    # n이 짚신벌레의 수명보다 작을 경우
    if n < d:
        return dp[n]

    # 첫 번째 짚신벌레 죽음
    dp[d] = (dp[d-1] + dp[d-a] - dp[d-b] - 1) % mod

    # 지금까지의 dp의 누적합을 구함
    for i in range(1, d+1):
        dp[i] = (dp[i] + dp[i-1]) % mod

    # 첫 번째 짚신벌레 사망이후 i일 째의 짚신벌레의 수는
    # i-b+1일부터 i-a일 까지 생존해있던 짚신벌레 수의 합과 같음
    # dp의 누적합을 구해두었기 때문에 dp[i-a] - dp[i-b] 로 구할 수 있으며
    # dp[i] 또한 누적값이 되어야하기 때문에 dp[i-1]을 더해준다
    for i in range(d+1, n+1):
        dp[i] = (dp[i-1] + dp[i-a] - dp[i-b]) % mod

    # n일 째의 짚신벌레 수(dp[n] - dp[n-1])를 반환
    return (dp[n] - dp[n-1]) % mod
