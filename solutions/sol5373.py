import sys

input = sys.stdin.readline
color = ['w', 'y', 'r', 'o', 'g', 'b']


# 5373 큐빙
# 모든 면이 같은색으로 맞춰진 3 * 3 * 3 루빅큐브를 주어진 명령대로 회전
# 모든 회전이 끝난 후 윗면의 상태를 출력하는 문제
def sol5373():
    answer = []
    for _ in range(int(input())):
        cube = init_cube()
        n = int(input())
        cmds = input().split()
        for cmd in cmds:
            rotate(cube, cmd[0], cmd[1])
        answer.append('\n'.join([''.join(cube[0][i]) for i in range(3)]))
    return '\n'.join(answer)


def init_cube():
    return [[[c] * 3 for _ in range(3)] for c in color]


def rotate(cube, side, direction):
    u, d, f, b, l, r = cube
    # 위쪽 회전
    if side == 'U':
        # 시계 방향
        if direction == '+':
            u[0][0], u[0][1], u[0][2], u[1][2], u[2][2], u[2][1], u[2][0], u[1][0] = u[2][0], u[1][0], u[0][0], u[0][1], u[0][2], u[1][2], u[2][2], u[2][1]
            b[0], r[0], f[0], l[0] = l[0], b[0], r[0], f[0]

        # 반시계 방향
        else:
            u[0][0], u[0][1], u[0][2], u[1][2], u[2][2], u[2][1], u[2][0], u[1][0] = u[0][2], u[1][2], u[2][2], u[2][1], u[2][0], u[1][0], u[0][0], u[0][1]
            b[0], r[0], f[0], l[0] = r[0], f[0], l[0], b[0]

    # 아래쪽 회전
    elif side == 'D':
        # 시계 방향
        if direction == '+':
            d[0][0], d[0][1], d[0][2], d[1][2], d[2][2], d[2][1], d[2][0], d[1][0] = d[2][0], d[1][0], d[0][0], d[0][1], d[0][2], d[1][2], d[2][2], d[2][1]
            f[2], r[2], b[2], l[2] = l[2], f[2], r[2], b[2]

        # 반시계 방향
        else:
            d[0][0], d[0][1], d[0][2], d[1][2], d[2][2], d[2][1], d[2][0], d[1][0] = d[0][2], d[1][2], d[2][2], d[2][1], d[2][0], d[1][0], d[0][0], d[0][1]
            f[2], r[2], b[2], l[2] = r[2], b[2], l[2], f[2]

    # 앞쪽 회전
    elif side == 'F':
        # 시계 방향
        if direction == '+':
            f[0][0], f[0][1], f[0][2], f[1][2], f[2][2], f[2][1], f[2][0], f[1][0] = f[2][0], f[1][0], f[0][0], f[0][1], f[0][2], f[1][2], f[2][2], f[2][1]
            u[2][0], u[2][1], u[2][2], r[0][0], r[1][0], r[2][0], d[0][2], d[0][1], d[0][0], l[2][2], l[1][2], l[0][2] = l[2][2], l[1][2], l[0][2], u[2][0], u[2][1], u[2][2], r[0][0], r[1][0], r[2][0], d[0][2], d[0][1], d[0][0]

        # 반시계 방향
        else:
            f[0][0], f[0][1], f[0][2], f[1][2], f[2][2], f[2][1], f[2][0], f[1][0] = f[0][2], f[1][2], f[2][2], f[2][1], f[2][0], f[1][0], f[0][0], f[0][1]
            u[2][0], u[2][1], u[2][2], r[0][0], r[1][0], r[2][0], d[0][2], d[0][1], d[0][0], l[2][2], l[1][2], l[0][2] = r[0][0], r[1][0], r[2][0], d[0][2], d[0][1], d[0][0], l[2][2], l[1][2], l[0][2], u[2][0], u[2][1], u[2][2]

    # 뒤쪽회전
    elif side == 'B':
        # 시계 방향
        if direction == '+':
            b[0][0], b[0][1], b[0][2], b[1][2], b[2][2], b[2][1], b[2][0], b[1][0] = b[2][0], b[1][0], b[0][0], b[0][1], b[0][2], b[1][2], b[2][2], b[2][1]
            u[0][2], u[0][1], u[0][0], l[0][0], l[1][0], l[2][0], d[2][0], d[2][1], d[2][2], r[2][2], r[1][2], r[0][2] = r[2][2], r[1][2], r[0][2], u[0][2], u[0][1], u[0][0], l[0][0], l[1][0], l[2][0], d[2][0], d[2][1], d[2][2]

        # 반시계 방향
        else:
            b[0][0], b[0][1], b[0][2], b[1][2], b[2][2], b[2][1], b[2][0], b[1][0] = b[0][2], b[1][2], b[2][2], b[2][1], b[2][0], b[1][0], b[0][0], b[0][1]
            u[0][2], u[0][1], u[0][0], l[0][0], l[1][0], l[2][0], d[2][0], d[2][1], d[2][2], r[2][2], r[1][2], r[0][2] = l[0][0], l[1][0], l[2][0], d[2][0], d[2][1], d[2][2], r[2][2], r[1][2], r[0][2], u[0][2], u[0][1], u[0][0]

    # 왼쪽회전
    elif side == 'L':
        # 시계 방향
        if direction == '+':
            l[0][0], l[0][1], l[0][2], l[1][2], l[2][2], l[2][1], l[2][0], l[1][0] = l[2][0], l[1][0], l[0][0], l[0][1], l[0][2], l[1][2], l[2][2], l[2][1]
            u[0][0], u[1][0], u[2][0], f[0][0], f[1][0], f[2][0], d[0][0], d[1][0], d[2][0], b[2][2], b[1][2], b[0][2] = b[2][2], b[1][2], b[0][2], u[0][0], u[1][0], u[2][0], f[0][0], f[1][0], f[2][0], d[0][0], d[1][0], d[2][0]

        # 반시계 방향
        else:
            l[0][0], l[0][1], l[0][2], l[1][2], l[2][2], l[2][1], l[2][0], l[1][0] = l[0][2], l[1][2], l[2][2], l[2][1], l[2][0], l[1][0], l[0][0], l[0][1]
            u[0][0], u[1][0], u[2][0], f[0][0], f[1][0], f[2][0], d[0][0], d[1][0], d[2][0], b[2][2], b[1][2], b[0][2] = f[0][0], f[1][0], f[2][0], d[0][0], d[1][0], d[2][0], b[2][2], b[1][2], b[0][2], u[0][0], u[1][0], u[2][0]

    elif side == 'R':
        # 시계 방향
        if direction == '+':
            r[0][0], r[0][1], r[0][2], r[1][2], r[2][2], r[2][1], r[2][0], r[1][0] = r[2][0], r[1][0], r[0][0], r[0][1], r[0][2], r[1][2], r[2][2], r[2][1]
            u[2][2], u[1][2], u[0][2], b[0][0], b[1][0], b[2][0], d[2][2], d[1][2], d[0][2], f[2][2], f[1][2], f[0][2] = f[2][2], f[1][2], f[0][2], u[2][2], u[1][2], u[0][2], b[0][0], b[1][0], b[2][0], d[2][2], d[1][2], d[0][2]

        # 반시계 방향
        else:
            r[0][0], r[0][1], r[0][2], r[1][2], r[2][2], r[2][1], r[2][0], r[1][0] = r[0][2], r[1][2], r[2][2], r[2][1], r[2][0], r[1][0], r[0][0], r[0][1]
            u[2][2], u[1][2], u[0][2], b[0][0], b[1][0], b[2][0], d[2][2], d[1][2], d[0][2], f[2][2], f[1][2], f[0][2] = b[0][0], b[1][0], b[2][0], d[2][2], d[1][2], d[0][2], f[2][2], f[1][2], f[0][2], u[2][2], u[1][2], u[0][2]
