import sys

input = sys.stdin.readline


# 2133 타일 채우기
# 3 x N 크기의 벽을 2 x 1, 1 x 2 타일로 채우는 경우의 수를 구하는 문제
def sol2133():
    # 벽의 가로길이
    n = int(input())

    # 타일의 크기가 짝수이기 때문에 N이 홀수일 경우 채울 수 있는 경우의 수가 존재하지 않음
    if n % 2:
        return 0

    # 길이가 세로인 경우는 생략하기위해 타일의 가로길이를 반으로 나눈다
    n //= 2

    # dp[n] 은 벽의 가로길이가 2*n 일때 경우의 수
    # acc[n] 은 dp의 누적합 배열
    dp = [0] * (n + 1)
    acc = [0] * (n + 1)

    # 벽의 가로 길이가 0 일 때 경우의 수는 1개(아무 타일도 올리지 않는 경우)
    dp[0] = acc[0] = 1

    # 벽의 가로 길이가 2 일때 경우의 수는 3개
    dp[1] = 3

    # 누적합 초기화
    acc[0], acc[1] = 1, 4

    # 벽의 가로길이가 2 * n 일때의 경우의 수는 다음과 같다
    # 1. 벽의 가로길이가 <2 * (n - 1) 일 때의 경우의 수> * <벽의 가로길이가 2 일때 경우의수>
    # 2. 벽의 가로길이가 <2 * (n - 2) ~ 2 * 0 일 때의 경우의 수> * 2
    # 2 번 케이스를 더해줘야 하는 이유는 1 번 케이스로 찾을 수 없는 예외가 4 이상의 짝수길이마다 2개씩 발생하기 때문
    # 벽의 가로길이가 4, 6, 8, ... 일때의 경우의 수를 직접 그려보다보면 어떤 예외가 발생하는지 알 수 있음
    for i in range(2, n + 1):
        dp[i] = dp[i - 1] * 3 + acc[i - 2] * 2
        acc[i] = acc[i - 1] + dp[i]

    # 가로길이가 2 * n 인 벽을 채우는 경우의 수를 반환
    return dp[n]
